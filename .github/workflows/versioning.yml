name: Automatic Versioning

on:
  push:
    branches:
      - master
      - dev
      - 'feature/**'
      - 'fix/**'
      - 'hotfix/**'

permissions:
  actions: write  # Grants write permissions to the actions scope, including variables

jobs:
  update-version:
    if: github.actor != 'github-actions[bot]'  # Prevents the workflow from running on its own commits
    name: Calculate and Update VERSION_NAME
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Repository with Full History
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necessary for GitVersion to access full history

      # Step 2: Prevent Workflow Loop on Version Bump Commits
      - name: Prevent Loop on Version Bump Commits
        if: "startsWith(github.head_commit.message, 'chore: bump version to')"
        run: |
          echo "Detected version bump commit. Exiting workflow to prevent loop."
          exit 0

      # Step 3: Set Up SSH Authentication
      - name: Set Up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 4: Setup GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.1
        with:
          versionSpec: '6.0.x'
          configFilePath: GitVersion.yml

      # Step 5: Determine version
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v3.1.1
        with:
          useConfigFile: true

      # Step 6: Set Version Variables from GitVersion Outputs
      - name: Set Version Variables
        run: |
          echo "VERSION_NAME=${{ steps.gitversion.outputs.SemVer }}" >> $GITHUB_ENV
          echo "MAJOR=${{ steps.gitversion.outputs.Major }}" >> $GITHUB_ENV
          echo "MINOR=${{ steps.gitversion.outputs.Minor }}" >> $GITHUB_ENV
          echo "PATCH=${{ steps.gitversion.outputs.Patch }}" >> $GITHUB_ENV
          echo "VERSION_CODE=$((MAJOR * 10000 + MINOR * 100 + PATCH))" >> $GITHUB_ENV
        shell: bash

      # Step 7: Update VERSION_NAME Repository Variable via GitHub API
      - name: Update VERSION_NAME Variable
        run: |
          # Install jq if not already available
          sudo apt-get update && sudo apt-get install -y jq
          
          API_URL="https://api.github.com/repos/${{ github.repository }}/actions/variables/VERSION_NAME"
          NEW_VERSION="${VERSION_NAME}"
          
          # Fetch the current variable ID
          VARIABLE_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables" | \
            jq -r --arg name "VERSION_NAME" '.variables[] | select(.name==$name) | .id')
          
          if [ -z "$VARIABLE_ID" ]; then
            echo "VERSION_NAME variable not found. Creating it."
            CREATE_RESPONSE=$(curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/actions/variables" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"name\": \"VERSION_NAME\", \"value\": \"${NEW_VERSION}\"}")
          
            UPDATED_VALUE=$(echo "$CREATE_RESPONSE" | jq -r '.value')
            if [ "$UPDATED_VALUE" == "$NEW_VERSION" ]; then
              echo "VERSION_NAME successfully created with value ${NEW_VERSION}"
            else
              echo "Failed to create VERSION_NAME. Response:"
              echo "$CREATE_RESPONSE"
              exit 1
            fi
          else
            # Update existing variable
            RESPONSE=$(curl -s -X PATCH "$API_URL/$VARIABLE_ID" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"value\": \"${NEW_VERSION}\"}")
          
            # Validate the response
            UPDATED_VALUE=$(echo "$RESPONSE" | jq -r '.value')
            if [ "$UPDATED_VALUE" == "$NEW_VERSION" ]; then
              echo "VERSION_NAME successfully updated to ${NEW_VERSION}"
            else
              echo "Failed to update VERSION_NAME. Response:"
              echo "$RESPONSE"
              exit 1
            fi
          fi
        shell: bash